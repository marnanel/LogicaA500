SECTION "ArealH - header action"

/**
         AREAL HEADER ACTION ROUTINE
         ---------------------------

         This section contains :

            G.ar.arealh and its utility routines

         NAME OF FILE CONTAINING RUNNABLE CODE:

         r.areal

         REVISION HISTORY:

         DATE     VERSION  AUTHOR      DETAILS OF CHANGE
         30.4.87     1       SA        Initial version
          5.5.87     2       SA        Adjust text in boxes
          8.5.87     3       SA        Mods for incidence type
         12.5.87     4       SA        Implement data restore
         22.5.87     5       SA        Final adjustments to complete header
         29.5.87     6       SA        Display norm. factor in message area
         12.6.87     7       SA        Insert help control
         22.6.87     8       SA        Menu bar control
         29.6.87     9       SA        Modified general validation routine
          4.9.87    10       SRY       Fix message clearing bug
                                       and norm fac. input bug
         19.10.87   11       MH        updated for UNI version
**/

GET "libhdr"
GET ":4.UINED.gh.glhd"
GET ":4.UINED.gh.glARhd"
GET ":4.UINED.h.sdhd"
GET ":4.UINED.h.sihd"
GET ":4.UINED.h.kdhd"
GET ":4.UINED.h.arhd"

/**
         G.AR.AREALH - SET UP HEADER PAGE
         --------------------------------

         Specific action routine for areal header

         INPUTS:

         none

         OUTPUTS:

         none

         GLOBALS MODIFIED:

         contents of g.ar.buff


         SPECIAL NOTES FOR CALLERS:

         none

         PROGRAM DESIGN LANGUAGE:

         G.ar.area []
         ------------

         IF state justselected
         THEN call initialise routine
         ENDIF

         <Take action depending on function key>

         CASE OF key
            Function 4 : show ranges
                         allow edits
                         ENDCASE
            Function 3 :
            Function 6 :
            Function 5 : IF data not valid
                         THEN key = no action
                         ENDCASE
            Default    :
         <Take action depending on screen state>

         CASE OF screen state
            0 :   entry mode - do nothing
            1 :   find current box
                  last box = Current box
                  IF current box =  unknown
                  THEN IF key is alphanumeric
                       THEN beep
                  ELSE highlight last box
                       initialise for input
                       set screen state = 2
            2 :   IF last box = current box
                  THEN screen state = 3
                  ELSE de-highlight last box
                       set screen state = 1
            3 :   CASE OF last box
                   units              :
                   normalising factor : read input
                                        IF key = return
                                        THEN IF validate
                                             THEN screen state = 1
                                             ELSE warning message
                                        ENDCASE
                   data               :
                   area               : IF key = change
                                        THEN show next string
                                        IF last box ~= current box
                                        THEN screen state = 1
                                        IF box = data AND type = incidence
                                        THEN deal with incidence type
                                        ENDCASE
         default : screen state = 1
         ENDCASE
**/

LET G.ar.arealh() BE
$( LET mbar = TABLE m.sd.act, m.sd.wBlank, m.sd.act,
                    m.sd.act, m.sd.act,    m.sd.act

   IF g.menubar!m.box1 = m.wExit
   THEN RETURN

   IF G.context!m.justselected
   THEN G.ar.arealhini()

   SWITCHON G.key INTO
   $( CASE m.kd.Fkey1 : ENDCASE
      CASE m.kd.Fkey4 : TEST g.ar.buff!m.ar.ranges.set
                        THEN IF valid.for.next.state()
                             THEN screen(4)
                        ELSE $( IF g.ar.buff!m.ar.entry.mode
                                THEN $( g.key := m.kd.return
                                        handle.states ()
                                        g.key := m.kd.Fkey4
                                     $)
                                IF g.ar.check.class.intervals()
                                THEN $( g.sc.clear (m.sd.message)
                                        g.ar.buff!m.ar.ranges.set := true
                                        screen (0)
                                     $)
                             $)
                        ENDCASE
      CASE m.kd.Fkey5 :
      CASE m.kd.Fkey3 :
      CASE m.kd.Fkey6 : TEST valid.for.next.state()
                        THEN $( // following 3 lines changes 4.9.87 SRY
                                if g.key = m.kd.fkey5 g.sc.mess ("Saving data")
                                g.ar.save (m.ar.header)
                                g.sc.clear (m.sd.message)
                             $)
                        ELSE g.key := m.kd.noact
                        ENDCASE
      DEFAULT         : handle.states()
                        ENDCASE
   $)

   TEST (g.ar.buff!m.ar.ranges.set) &
        (g.ar.buff!m.ar.datatype ~= m.ar.incidence)
   THEN mbar!m.box4 := m.sd.act
   ELSE $( UNLESS g.ar.buff!m.ar.ranges.set
           THEN  mbar!m.box4 := m.sd.wClear
           IF g.ar.buff!m.ar.datatype = m.ar.incidence
           THEN mbar!m.box4 := m.sd.wBlank
        $)

   IF g.redraw |
      (g.menubar!m.box4 ~= mbar!m.box4)
   THEN g.sc.menu (mbar)
$)

AND handle.states() BE
$( IF g.ar.buff!m.ar.xpos ~= G.xpoint |
      g.ar.buff!m.ar.ypos ~= G.ypoint |
      g.ar.buff!m.ar.last.box ~= on.box()
   THEN g.ar.buff!m.ar.status := m.ar.on

   SWITCHON g.ar.buff!m.ar.screenstate INTO
   $( CASE 1 : UNLESS (on.box() = m.ar.unknown) |
                      (g.ar.buff!m.ar.status = m.ar.off)
               $( LET box = g.ar.buff!m.ar.box
                  LET g = G.key
                  g.ar.buff!m.ar.last.box := box
                  G.key := m.kd.noact           // initialise boxes - no action
                  TEST type (box) = m.ar.entry
                  THEN $( g.ar.highlight (box, m.sd.cyan, m.sd.blue)
                          g.ar.char.input (box)
                       $)
                  ELSE g.ar.cycle (box, m.sd.yellow)
                  g.ar.buff!m.ar.status := m.ar.on
                  G.key := g
                  screen(2)
               $)
               ENDCASE
      CASE 2 : $( LET box = g.ar.buff!m.ar.last.box
                  TEST (on.box() = box) & (g.ar.buff!m.ar.status = m.ar.on)
                  THEN $( g.ar.buff!m.ar.oldstr := true
                          screen(3)
                       $)
                  ELSE $( TEST type(box) = m.ar.entry
                          THEN g.ar.highlight (box, m.sd.blue, m.sd.yellow)
                          ELSE $( LET g = G.key
                                  G.key := m.kd.noact
                                  g.ar.cycle (box, m.sd.cyan)
                                  IF g.ar.buff!m.ar.datatype = m.ar.incidence &
                                     g.context!m.data.type  ~= m.ar.incidence &
                                     g.context!m.oldfile
                                  THEN $( g.ar.highlight (m.ar.incid,
                                                        m.sd.blue, m.sd.yellow)
                                          g.ar.buff!m.ar.firstincid := true
                                       $)
                                  G.key := g
                               $)
                          screen(1)
                       $)
               $)
               ENDCASE
      CASE 3 : $( LET box = g.ar.buff!m.ar.last.box
                  SWITCHON box INTO
                  $( CASE m.ar.units :
                     CASE m.ar.nfac  : entry (box)
                                       ENDCASE
                     CASE m.ar.data  :
                     CASE m.ar.area  : cycle (box)
                                       ENDCASE
                  $)
               $)
               ENDCASE
      CASE 4 : g.ar.ranges()
               ENDCASE
      default: screen(1)
   $)
$)

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//                  Utility routines used by AREA only                       //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

// returns true if all values entered are consistent
AND valid.for.next.state() = VALOF
$( LET y = G.ypoint
   LET g = G.key

   IF g.ar.buff!m.ar.screenstate > 1
   THEN $( G.ypoint := 0
           G.key := m.kd.return
           handle.states()
           G.ypoint := 1
           G.key := m.kd.noact
           handle.states()
           G.key := g
           G.ypoint := y
        $)
   IF 1 < g.ar.buff!m.ar.screenstate < 4
   THEN RESULTIS false
   IF g.ar.buff!m.ar.screenstate = 4
   THEN UNLESS g.ar.check.class.intervals() RESULTIS false

   UNLESS g.ar.valid (m.ar.nfac) RESULTIS false
   TEST g.context!m.oldfile
   THEN IF g.context!m.data.type  ~= m.ar.incidence &
           g.ar.buff!m.ar.datatype = m.ar.incidence
        THEN UNLESS g.ar.valid (m.ar.incid) RESULTIS false
   ELSE IF g.ar.buff!m.ar.datatype = m.ar.incidence
        THEN UNLESS (g.ar.buff%(m.ar.nfac*bytesperword+m.lsb) = 1) &
                    (g.ar.buff%(m.ar.nfac*bytesperword+m.msb) = '0')
             THEN $( g.sc.ermess ("Set norm. factor to zero for incidence")
                     RESULTIS false
                  $)

   RESULTIS true
$)

// controls highlighting and input to entry boxes in screen state 3
AND entry (box) BE
$( TEST g.key = m.kd.noact |
        g.key = m.kd.up    |
        g.key = m.kd.down
   THEN IF g.ar.buff%(box*bytesperword) = 0 | g.ar.buff!m.ar.oldstr
        THEN IF on.box() ~= box             // if moved off box without editing
             THEN screen(2)
   ELSE $( g.ar.char.input(box)
           UNLESS g.key = m.kd.right |
                  g.key = m.kd.left
           THEN g.ar.buff!m.ar.oldstr := false
        $)
   IF g.key = m.kd.return
   THEN TEST g.ar.valid (box)
        THEN $( g.ar.buff!m.ar.status := m.ar.off
                g.ar.buff!m.ar.xpos   := G.xpoint
                g.ar.buff!m.ar.ypos   := G.Ypoint
                IF box = m.ar.nfac
                THEN $( LET one = vec 1
                        G.ut.set32(1, 0, one)
                        g.sc.clear (m.sd.message)
                        g.sc.movea (m.sd.message, 0, 0)
                        g.sc.selcol (m.sd.cyan)
                        g.sc.rect (m.sd.plot, m.sd.mesw-1, m.sd.mesh-1)
                        g.sc.movea (m.sd.message, 0, m.sd.mesYtex)
                        g.sc.selcol (m.sd.blue)
                        g.sc.opnum (one, g.ar.buff!m.ar.norm, 40)
                     $)
                screen(2)
             $)
        ELSE $( LET g = G.key
                IF box = m.ar.nfac
                THEN $( LET ptr = VEC 3
                        g.sc.savcur (ptr)
                        g.sc.clear (m.sd.message)
                        g.sc.rescur (ptr)
                     $)
                G.key := m.kd.noact
                g.ar.char.input (box)
                G.key := g
             $)
$)

// controls highlighting of cycle fields and calls to g.ar.incidence()
AND cycle (box) BE
$( TEST screen.unlocked (box)
   THEN screen(2)
   ELSE $( TEST g.key = m.kd.change
           THEN $( IF g.ar.buff!m.ar.datatype = m.ar.incidence DO
                   $( g.ar.highlight (m.ar.incid, m.sd.black, m.sd.black)
                      g.ar.buff!m.ar.firstincid := true
                      g.ar.buff!m.ar.readreply  := false
                      g.ar.buff!m.ar.reply      := 0
                      g.ar.buff!m.ar.incid      := 0
                   $)
                   g.ar.cycle (box, m.sd.yellow)
                $)
           ELSE IF box = m.ar.data & g.ar.buff!m.ar.datatype = m.ar.incidence
                THEN g.ar.incidence()
        $)
$)

// returns result on whether a cycle field is locked or not
// with special case for incidence entry box
AND screen.unlocked (box) = VALOF
$( IF on.box() = box THEN RESULTIS false
   IF (g.context!m.data.type ~= m.ar.incidence) &
       ((box = m.ar.data) & (g.ar.buff!m.ar.datatype = m.ar.incidence) &
        (g.ar.buff%(m.ar.incid*bytesperword) ~= 0))
   THEN RESULTIS false
   RESULTIS true
$)

// Return identifier to the field the cursor is on - except for incidence data
AND on.box() = VALOF
$( LET box = m.ar.unknown
   IF (m.ar.nfacY -m.sd.linW <= G.ypoint <=  m.ar.nfacY)
      THEN UNLESS g.context!m.data.type = m.ar.incidence THEN box := m.ar.nfac
   IF (m.ar.dataY -m.sd.linW <= G.ypoint <=  m.ar.dataY) THEN box := m.ar.data
   IF (m.ar.areaY -m.sd.linW <= G.ypoint <=  m.ar.areaY)
      THEN UNLESS g.context!m.oldfile                    THEN box := m.ar.area
   IF (m.ar.unitsY-m.sd.linW <= G.ypoint <= m.ar.unitsY) THEN box := m.ar.units
   g.ar.buff!m.ar.box := box
   RESULTIS box
$)

// returns type of current field
AND type (box) = VALOF SWITCHON box INTO
$( CASE m.ar.data    :
   CASE m.ar.area    : RESULTIS m.ar.cycle
   CASE m.ar.nfac    :
   CASE m.ar.units   : RESULTIS m.ar.entry
   CASE m.ar.unknown :
   DEFAULT           : RESULTIS m.ar.unknown
$)

AND screen(state) BE g.ar.buff!m.ar.screenstate := state
.

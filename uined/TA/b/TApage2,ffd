/**
         TABULAR INPUT EDITOR
         --------------------

         This section contains :

            G.ta.box
            G.ta.redrawv
            G.ta.redrawc
            G.ta.max.labels

         NAME OF FILE CONTAINING RUNNABLE CODE:

         r.TAedit

         REVISION HISTORY:

         DATE     VERSION  AUTHOR      DETAILS OF CHANGE
         24.04.87 1        MH          initial version
         13.08.87 2        SRY         Removed let a =
         21.10.87 3        MH          updated for UNI version
**/

SECTION "TApage2"

GET "libhdr"
GET ":4.UINED.gh.glhd"
GET ":4.UINED.gh.glTAhd"
GET ":4.UINED.h.sdhd"
GET ":4.UINED.h.TAhd"

/**
         G.TA.REDRAWV
         ------------

         This routine draws the list of variable labels.

         INPUTS:

         G.ta.area

         OUTPUTS:

         None.

         GLOBALS MODIFIED:

         None.

         SPECIAL NOTES FOR CALLERS:

         None.

         PROGRAM DESIGN LANGUAGE:

         G.ta.redrawv[]
         -------------

         clear display area
         current variable = inactive
         current category = inactive
         END IF
         FOR i = base label to max label
            FOR j = 1 TO 52 DO
               IF var.tag = i THEN
                  draw label
                  BREAK
               END IF
            END FOR
         END FOR

**/


let G.ta.redrawv(page, t) be
$(
   let x, x1, y = m.sd.charwidth * 2, 0, m.ta.ystart
   let n = ?    //label number
   let l = ?    //address of label
   let add.flag = ? //additive flag

   G.sc.pointer(m.sd.off)
   G.sc.movea(m.sd.display,0,m.sd.dish)
   G.sc.rect(m.sd.clear,m.sd.disw,-m.sd.linw*m.ta.lines-20)
   unless t = m.ta.d.var then
   $(
     G.ta.area%m.ta.sel.var:=m.ta.INACTIVE
     G.ta.area%m.ta.op:=m.ta.INACTIVE
   $)
   G.ta.area%m.ta.sel.cat:=m.ta.INACTIVE
   unless G.ta.area%m.ta.base.l = 0 then
   $(
      G.sc.selcol(m.sd.cyan)
      n:=G.ta.area%m.ta.base.l
      for i = 1 to G.ta.area%m.ta.no.l do
      $(
         l:=getlabel(n)
         if l%0 > m.ta.str.l - 2 l%0 := m.ta.str.l - 2
         G.sc.movea(m.sd.display,x,y)
         G.sc.ofstr("%s",l)
         unless (t=m.ta.d.var) & (G.ta.area%m.ta.sel.var=n) then
         $(
            G.sc.movea(m.sd.display,x1,y)
            add.flag := G.ta.area%(m.ta.add.table + n - 1) = m.ta.true -> 'A', 'N'
            G.sc.ofstr("%c", add.flag)
         $)
         y:=y-m.sd.linw
         n:=n + 1 //next label number
      $)
   $)
   unless page
   $(
   test G.ta.area%m.ta.no.labels >= G.ta.max.labels() |
          G.ta.area%m.ta.no.vars >= m.ta.v.max | t = m.ta.d.var then
   $(
      G.sc.movea(m.sd.display,m.ta.bx0,m.ta.byn)
      G.sc.rect(m.sd.clear,m.ta.bw,m.ta.bhn)
   $)
   else
   $(
      G.sc.movea(m.sd.display,m.ta.bx0,m.ta.byn)
      G.sc.selcol(m.sd.cyan)
      G.sc.rect(m.sd.plot,m.ta.bw,m.ta.bhn)
      G.sc.movea(m.sd.display,m.ta.bx0+m.ta.newx,m.ta.byn+m.ta.newy)
      G.sc.selcol(m.sd.blue)
      G.sc.oprop("New")
   $)
   test G.ta.area%m.ta.mp > 1 & t ~= m.ta.d.var then
   $(
      G.sc.movea(m.sd.display,m.ta.bx0+500,m.ta.byn)
      G.sc.selcol(m.sd.cyan)
      G.sc.rect(m.sd.plot,m.ta.bw,m.ta.bhn)
      G.sc.movea(m.sd.display,m.ta.bx0+500+m.sd.charwidth,m.ta.byn+m.ta.newy)
      G.sc.selcol(m.sd.blue)
      G.sc.oprop("More...")
   $)
   else
   $(
      G.sc.movea(m.sd.display,m.ta.bx0+500,m.ta.byn)
      G.sc.rect(m.sd.clear,m.ta.bw,m.ta.bhn)
   $)
   $)
   G.sc.pointer(m.sd.on)
$)

/**
         G.TA.REDRAWC
         ------------

         This routine draws the list of category labels for the selected
         variable.

         INPUTS:

         G.ta.area

         OUTPUTS:

         None.

         GLOBALS MODIFIED:

         None.

         SPECIAL NOTES FOR CALLERS:

         None.

         PROGRAM DESIGN LANGUAGE:

         G.ta.redrawc[]
         -------------

         clear display area
             current category = inactive
         END IF
         FOR i = base label to max label
            FOR j = 1 TO 52 DO
               IF cat.tag = i AND var.tag = current variable THEN
                  draw label
                  BREAK
               END IF
            END FOR
         END FOR

**/


and G.ta.redrawc(page) be
$(
   let x, y = m.sd.disx0, m.ta.ystart
   let n = ?    //label number
   let l = ?    //address of label
   let t.l = ?      //temporary location for label length

   G.sc.pointer(m.sd.off)
   G.sc.movea(m.sd.display,0,m.sd.dish)
   G.sc.rect(m.sd.clear,m.sd.disw,-(m.sd.linw*m.ta.lines)-24)
   G.ta.area%m.ta.sel.cat:=m.ta.INACTIVE
   G.ta.area%m.ta.c.l:=m.ta.INACTIVE
   G.ta.area%m.ta.op:=m.ta.INACTIVE
   unless G.ta.area%m.ta.base.l = 0 then
   $(
      G.sc.selcol(m.sd.cyan)
      n:=G.ta.area%m.ta.base.l
      for i = 1 to G.ta.area%m.ta.no.l do
      $(
         l:=getlabel(n)
         t.l:=l%0
         unless t.l <= m.ta.str.l-2 l%0:=m.ta.str.l-2       
                                //only display 1st 9 chars of label
         G.sc.selcol(m.sd.blue)
         G.sc.movea(m.sd.display,x,y)
         G.sc.rect(m.sd.plot,m.sd.charwidth, -(m.sd.linw-8))  
                                            //draw abbreviation
         G.sc.movea(m.sd.display,x,y-4)
         G.sc.selcol(m.sd.cyan)
         G.sc.ofstr("%c",l%41)
         G.sc.selcol(m.sd.blue)
         G.sc.movea(m.sd.display,x+(2*m.sd.charwidth)-4,y)
         G.sc.rect(m.sd.plot,m.sd.charwidth*(m.ta.str.l-2)+4, -(m.sd.linw-8))  //draw abbreviation
         G.sc.movea(m.sd.display,x+(2*m.sd.charwidth)-4,y-4)
         G.sc.selcol(m.sd.cyan)
         G.sc.ofstr("%s",l)
         l%0:=t.l  //restore label length
         y:=y-m.sd.linw
         n:=n + 1 //next label number
      $)
   $)
   unless page
   $(
   test G.ta.area%m.ta.no.labels >= G.ta.max.labels() |
          G.ta.area%(m.ta.var.table + G.ta.area%m.ta.sel.var -1) >= m.ta.v.max then
   $(
      G.sc.movea(m.sd.display,m.ta.bx0,m.ta.byn)
      G.sc.rect(m.sd.clear,m.ta.bw,m.ta.bhn)
   $)
   else
   $(
      G.sc.movea(m.sd.display,m.ta.bx0,m.ta.byn)
      G.sc.selcol(m.sd.cyan)
      G.sc.rect(m.sd.plot,m.ta.bw,m.ta.bhn)
      G.sc.movea(m.sd.display,m.ta.bx0+m.ta.newx,m.ta.byn+m.ta.newy)
      G.sc.selcol(m.sd.blue)
      G.sc.oprop("New")
   $)
   test G.ta.area%m.ta.mp > 1 then
   $(
      G.sc.movea(m.sd.display,m.ta.bx0+500,m.ta.byn)
      G.sc.selcol(m.sd.cyan)
      G.sc.rect(m.sd.plot,m.ta.bw,m.ta.bhn)
      G.sc.movea(m.sd.display,m.ta.bx0+500+m.sd.charwidth,m.ta.byn+m.ta.newy)
      G.sc.selcol(m.sd.blue)
      G.sc.oprop("More...")
   $)
   else
   $(
      G.sc.movea(m.sd.display,m.ta.bx0+500,m.ta.byn)
      G.sc.rect(m.sd.clear,m.ta.bw,m.ta.bhn)
   $)
   $)
   G.sc.pointer(m.sd.on)
$)



and getlabel(n) = VALOF
$(
   let l = G.ta.area + (m.ta.labels / bytesperword)

   for i = 1 to 52 do
   $(
      test G.ta.area%m.ta.v.or.c = m.ta.v then
         if l%0 = n & l%1 = m.ta.free BREAK
      else
         if l%0 = G.ta.area%m.ta.sel.var & l%1 = n BREAK
      l:=l + (m.ta.l.width / bytesperword)
   $)
   resultis l+1
$)

/**
         G.TA.BOX
         --------

         This routine draws the "More..." and "New" boxes if requested
         else the boxes are blanked out.

         INPUTS:

         G.ta.area

         OUTPUTS:

         None.

         GLOBALS MODIFIED:

         None.

         SPECIAL NOTES FOR CALLERS:

         None.

         PROGRAM DESIGN LANGUAGE:

         G.ta.box[switch.]
         -------------

         IF switch. is on THEN
            IF not too many labels THEN
               draw "New" box
            END IF
            IF more than 1 page to display THEN
               draw "More..." box
            END IF
         ELSE
            blank out "New" and "More..." boxes
         END IF

**/

and G.ta.box(switch.) be
$(
   let n.lab = G.ta.area%m.ta.v.or.c=m.ta.v -> G.ta.area%m.ta.no.vars,
               G.ta.area%(m.ta.var.table+G.ta.area%m.ta.sel.var-1)
   let cursor=VEC 3

   G.sc.savcur(cursor)
   G.sc.pointer(m.sd.off)
   test switch. = m.sd.on
   $(
      unless G.ta.area%m.ta.no.labels >= G.ta.max.labels() | n.lab >= m.ta.v.max then
      $(
         G.sc.movea(m.sd.display,m.ta.bx0,m.ta.byn)
         G.sc.selcol(m.sd.cyan)
         G.sc.rect(m.sd.plot,m.ta.bw,m.ta.bhn)
         G.sc.movea(m.sd.display,m.ta.bx0+m.ta.newx,m.ta.byn+m.ta.newy)
         G.sc.selcol(m.sd.blue)
         G.sc.oprop("New")
      $)
      if G.ta.area%m.ta.mp > 1 then
      $(
         G.sc.movea(m.sd.display,m.ta.bx0+500,m.ta.byn)
         G.sc.selcol(m.sd.cyan)
         G.sc.rect(m.sd.plot,m.ta.bw,m.ta.bhn)
         G.sc.movea(m.sd.display,m.ta.bx0+500+m.sd.charwidth,m.ta.byn+m.ta.newy)
         G.sc.selcol(m.sd.blue)
         G.sc.oprop("More...")
      $)
   $)
   else
   $(
      G.sc.movea(m.sd.display,m.ta.bx0,m.ta.byn)
      G.sc.rect(m.sd.clear,m.ta.bw,m.ta.bhn)
      G.sc.movea(m.sd.display,m.ta.bx0+500,m.ta.byn)
      G.sc.rect(m.sd.clear,m.ta.bw,m.ta.bhn)
   $)
   G.sc.pointer(m.sd.on)
   G.sc.rescur(cursor)
$)

/**
         G.TA.MAX.LABELS
         ---------------

         This routine calculates the maximum number of labels can be
         used in either the variable or category states.

         INPUTS:

         G.ta.area

         OUTPUTS:

         None.

         GLOBALS MODIFIED:

         None.

         SPECIAL NOTES FOR CALLERS:

         None.

         PROGRAM DESIGN LANGUAGE:

         G.ta.max.labels[]
         -----------------

         FOR i = 0 to no.vars DO
            IF var.table%i = 0 or var.table = 1 THEN
               cats.needed = cats.needed + (2 - var.table%i)
            END IF
         END FOR
         IF (no.labels + cats.needed) >= m.ta.l.max then
            RESULTIS no.labels
         ELSE
            RESULTIS m.ta.l.max

**/

and G.ta.max.labels() = VALOF
$(
   let cats.needed = 0

   for i = 0 to G.ta.area%m.ta.no.vars - 1 do
      if G.ta.area%(m.ta.var.table + i) = 0 | G.ta.area%(m.ta.var.table + i) = 1 then
         cats.needed := cats.needed + (2 - G.ta.area%(m.ta.var.table + i))
  if G.ta.area%m.ta.v.or.c = m.ta.v then
     if (G.ta.area%m.ta.no.labels + cats.needed) >= (m.ta.l.max - 2) then
        resultis G.ta.area%m.ta.no.labels
  test G.ta.area%m.ta.no.labels + cats.needed >= m.ta.l.max then
      resultis G.ta.area%(m.ta.var.table + G.ta.area%m.ta.sel.var -1) < 2 ->
         m.ta.l.max + 1 - cats.needed, m.ta.l.max - cats.needed
   else
      resultis m.ta.l.max
$)
.



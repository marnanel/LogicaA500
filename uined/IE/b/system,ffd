SECTION "system"
/**
         HE.HELPC - CONFIGURE
         --------------------

         NAME OF FILE CONTAINING RUNNABLE CODE:

         r.help

         REVISION HISTORY:

         DATE     VERSION  AUTHOR      DETAILS OF CHANGE
         22.6.87     1       SA        Initial version
          7.9.87     2       SRY       Changed text to say 'DataEditor'
**/

STATIC $( s.i = 0 $)

GET"LIBHDR"
GET":4.UINED.gh.glhd"
GET":4.UINED.gh.glHEhd"
GET":4.UINED.h.sdhd"
GET":4.UINED.h.kdhd"
GET":4.UINED.h.iehd"

/**
         G.HE.CONFIGINI - INITIALISE FOR CONFIGURE
         -----------------------------------------

         Init routine to enter CONFIGURE

         INPUTS:

         none

         OUTPUTS:

         none

         GLOBALS MODIFIED:

         .......

         SPECIAL NOTES FOR CALLERS:

         .......

         PROGRAM DESIGN LANGUAGE:

         Clear screen
         Display help text page on SYSTEM
         Setup the help text window
         Setup the input routine, and display
         text cursor.
**/

LET G.he.configini() BE
$( LET line.(string) BE
   $( g.sc.movea(m.sd.display,m.sd.propXtex,m.sd.disYtex-m.sd.linw*s.i)
      g.sc.oprop(string)
      s.i := s.i+1
   $)

   s.i := 0

   G.sc.pointer( m.sd.off )
   G.sc.clear( m.sd.message )
   G.sc.clear( m.sd.display )
   G.sc.selcol( m.sd.cyan )

   line.("")
   line.("   Help with operating system commands")
   line.("")
   line.("This function allows you to enter operating")
   line.("system (star) commands - for example: **TIME.")
   line.("")
   line.("Type in the command you want executed and")
   line.("then press <ACTION> ( <RETURN> on the")
   line.("keyboard ). The cursor keys and <DELETE>")
   line.("are available for correction. You do not")
   line.("have to type in the initial '**': it is")
   line.("provided for you.")
   line.("")
   line.("Beware of any commands that can affect the")
   line.("running of the system. If you change filing")
   line.("systems, corrupt memory, or load a new")
   line.("language, then the DataEditor will have")
   line.("to be restarted with <SHIFT> / <BREAK>.")
   line.("")
   line.("")
   line.("")
   line.("")

   G.he.set.text.window()
   setup.input()

   IF G.screen = m.sd.menu
   THEN G.sc.moveptr( G.xpoint, G.sc.dtob(m.sd.display,4) )

   G.sc.pointer(m.sd.on)

   s.i := 0
$)

/**
         G.HE.CONFIG - ACTION ROUTINE FOR CONFIGURE
         ------------------------------------------

         Handles operating system commands

         INPUTS:

         none

         OUTPUTS:

         none

         GLOBALS MODIFIED:

         .......

         SPECIAL NOTES FOR CALLERS:

         .......

         PROGRAM DESIGN LANGUAGE:

         IF G.key ~= m.kd.noact AND string length < 39 chars
         THEN call INPUT to add char to string

         IF G.key = m.kd.return
         THEN send command to operating system


**/

AND G.he.config() BE
$( LET status = TABLE m.sd.act,m.sd.act,m.sd.act,
                      m.sd.act,m.sd.act,m.sd.act
   LET s.str = ?
   LET s.str.buf = m.ie.sys.string.size / bytesperword

   s.str := G.ut.align(G.ie.buff, m.ie.sys.string.byte, s.str.buf,
                                                 m.ie.sys.string.size)
   IF G.key ~= m.kd.noact
   THEN G.sc.input( s.str, m.sd.blue, m.sd.cyan, 38 )

   IF G.key = m.kd.return
   THEN $( G.sc.pointer( m.sd.off )

           IF s.i = 0  // clear display on first command
           THEN $( g.sc.clear( m.sd.display ) ; s.i := 1 $)

           G.he.send.to.OS( s.str )
           setup.input() // ready for next string

           G.sc.pointer( m.sd.on )
        $)

   IF G.redraw THEN G.sc.menu( status )
   G.ut.movebytes(s.str, 0, G.ie.buff, m.ie.sys.string.byte,
                                           m.ie.sys.string.size)
$)

AND setup.input() BE
$( G.sc.selcol( m.sd.cyan )
   G.sc.movea ( m.sd.message, 0, 0 )
   G.sc.rect  ( m.sd.plot, m.sd.mesW-1, m.sd.mesh-1 )
   G.sc.selcol( m.sd.blue )
   G.sc.movea ( m.sd.message,m.sd.mesXtex, m.sd.mesYtex )
   G.sc.oprop ( "**" )

   (g.ie.buff+m.ie.sys.string)%0 := 0

   G.key := m.kd.noact
   G.sc.input( g.ie.buff+m.ie.sys.string, m.sd.blue, m.sd.cyan, 2 )
$)
.

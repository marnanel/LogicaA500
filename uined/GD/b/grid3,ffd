SECTION "Grid3"

/**
      GRID HEADER - ACTIVE FIELD ROUTINES
      -----------------------------------

      This section contains :

         g.gd.highlight
         g.gd.char.input
         g.gd.cycle

      NAME OF FILE CONTAINING RUNNABLE CODE:

      r.gridh

      REVISION HISTORY:

      DATE     VERSION   AUTHOR     DETAILS OF CHANGE
      17.6.87     1        SA       Initial version
      30.7.87     2        SA       Eliminate g.sc.ofstr bug
**/

GET "LIBHDR"
GET ":4.UINED.gh.glhd"
GET ":4.UINED.gh.glGDhd"
GET ":4.UINED.h.sdhd"
GET ":4.UINED.h.sdphd"
GET ":4.UINED.h.sthd"
GET ":4.UINED.h.kdhd"
GET ":4.UINED.h.grhhd"

/**
      G.gd.HIGHLIGHT - CONTROL ENTRY BOX FIELDS
      -----------------------------------------

      controls highlighting of entry boxes

      INPUTS:

      field : m.gd.units
              m.gd.nfac
              m.gd.incid
              m.gd.values.str...
      output colour of entry box
      output colour of string

      OUTPUTS:

      none

      GLOBALS MODIFIED:

      none

      SPECIAL NOTES FOR CALLERS:

      none

      PROGRAM DESIGN LANGUAGE:

      G.gd.highlight (box, back.colour, text.colour)
      ----------------------------------------------

      move to appropriate position
      show entry box and contents in named colours
         and message if required
**/


LET g.gd.highlight (box, back.colour, text.colour) BE
$( LET posY, posX, absX = ?, ?, ?
   LET text = box
   LET ptr  = g.sc.pointer (m.sd.off)

   SWITCHON box INTO
   $( CASE m.gd.nfac   : posY  := m.gd.nfacY
                         posX  := m.gd.nfacX
                         absX  := m.gd.nfacXstr
                         ENDCASE
      CASE m.gd.units  : posY  := m.gd.unitsY
                         posX  := m.gd.unitsX
                         absX  := m.gd.posX
                         ENDCASE
      CASE m.gd.incid  : posY  := m.gd.incidY
                         posX  := m.gd.incidX
                         absX  := m.gd.incidXstr
                         ENDCASE
   $)

   text := text + g.gd.buff

   IF (box = m.gd.incid) &
      (g.context!m.oldfile)
   THEN g.sc.clear (m.sd.message)       // clear incidence message if it exists
   IF (box = m.gd.incid) & (back.colour = m.sd.cyan)
      THEN g.sc.mess ("Enter maximum value for absent data")

   g.sc.movea (m.sd.display, absX, posY)
   g.sc.selcol (back.colour)
   g.sc.rect (m.sd.plot, posX-m.gd.posX, -m.sd.linW)
   g.sc.selcol (text.colour)
   g.sc.movea (m.sd.display, absX+m.sd.disXtex, posY-2)
   g.sc.ofstr ("%s", text)
   g.sc.pointer (ptr)
$)


/**
      G.gd.CHAR.INPUT - ALLOWS INPUT INTO ENTRY BOXES
      -----------------------------------------------

      Controls input of characters into entry boxes, including on-screen
      display and storage in g.gd.buff


      INPUTS:

      pointer to string : m.gd.units
                          m.gd.nfac
                          m.gd.incid
                          m.gd.reply

      OUTPUTS:

      none

      GLOBALS MODIFIED:

      g.gd.buff+box

      SPECIAL NOTES FOR CALLERS:

      should only be used when on an active entry box and
      cursor position has been adjusted appropriately
      uses g.sc.input()

      PROGRAM DESIGN LANGUAGE:

      G.gd.char.input (box)
      ---------------------

      define length of allowed string
      call g.sc.input()
**/


AND g.gd.char.input(box, index) BE
$( LET string = ?
   LET length = ?
   string := g.gd.buff+box
   length := VALOF SWITCHON box INTO
   $( CASE m.gd.units  : RESULTIS m.gd.ulength
      CASE m.gd.nfac   : RESULTIS m.gd.nflength
      CASE m.gd.incid  : RESULTIS m.gd.inclength
      CASE m.gd.reply  : RESULTIS m.gd.replength
   $)
   G.sc.input (string, m.sd.blue, m.sd.cyan, length)
$)


/**
      G.gd.CYCLE - CONTROL CYCLE FIELDS
      ---------------------------------

      controls cycling of strings

      INPUTS:

      field : m.gd.data
              m.gd.raster
      output colour of string

      OUTPUTS:

      none

      GLOBALS MODIFIED:

      contents of g.gd.buff
      g.gd.buff!m.gd.cycol

      SPECIAL NOTES FOR CALLERS:

      g.gd.buff!m.gd.cycol is modified to hold the colour passed as input
      to the routine - hence callers should not highlight a new cycle
      field if they have not de-highlighted the old one.

      This routine uses certain hard-wired strings.

      PROGRAM DESIGN LANGUAGE:

      G.gd.cycle (box, colour)
      ------------------------

      IF no string
         THEN Initialise data input
      ENDIF
      IF colour is not old colour
         THEN show string in colour
      IF key pressed is 'change'
         THEN show next string
      ENDIF
**/

AND G.gd.cycle (box, colour) BE
$( UNLESS g.gd.buff!m.gd.cycstr
   THEN data.init (box)
   IF G.key = m.kd.change
   THEN next.string (box)
   IF g.gd.buff!m.gd.cycol ~= colour | G.key = m.kd.change
   THEN $( LET m = g.sc.pointer (m.sd.off)
           LET strptr = (box = m.gd.raster) -> m.gd.raster, m.gd.data
           LET ypos   = (box = m.gd.raster) -> m.gd.rasterY, m.gd.dataY
           g.sc.selcol (colour)
           g.sc.movea (m.sd.display, m.gd.posX, ypos)
           IF g.key = m.kd.change DO
              g.sc.rect (m.sd.clrR , m.gd.unitsX-m.gd.posX, -m.sd.linW)
           g.sc.movea (m.sd.display, m.gd.posX, ypos)
           g.sc.ofstr (g.gd.buff+strptr)
           g.sc.pointer (m)
        $)
$)

AND next.string (box) BE
$( TEST box = m.gd.data
   THEN $( LET string = VEC 7               // vector to point to strings below

           string!m.gd.categorised := "Categorised"
           string!m.gd.incidence   := "Incidence"
           string!m.gd.absolute    := "Absolute values (additive)"
           string!m.gd.ratio       := "Ratio"
           string!m.gd.percentage  := "Percentage"
           string!m.gd.means       := "Means"

           IF g.gd.buff!m.gd.cycstr
           g.gd.buff!m.gd.datatype := VALOF SWITCHON g.gd.buff!m.gd.datatype INTO
           $( CASE m.gd.categorised : RESULTIS m.gd.incidence
              CASE m.gd.incidence   : TEST g.context!m.data.type=m.gd.incidence
                                      THEN RESULTIS m.gd.categorised
                                      ELSE RESULTIS m.gd.absolute
              CASE m.gd.absolute    : RESULTIS m.gd.ratio
              CASE m.gd.ratio       : RESULTIS m.gd.percentage
              CASE m.gd.percentage  : RESULTIS m.gd.means
              CASE m.gd.means       : RESULTIS m.gd.categorised
              DEFAULT               : RESULTIS m.gd.absolute
           $)

           MOVE (string!(g.gd.buff!m.gd.datatype), g.gd.buff+m.gd.data,
                                                                m.gd.dstrwords)
        $)
   ELSE $( LET string = VEC 10
           string!1  := "1"
           string!2  := "2"
           string!3  := "3"
           string!4  := "4"
           string!5  := "5"
           string!6  := "6"
           string!7  := "7"
           string!8  := "8"
           string!9  := "9"
           string!10 := "10"

           g.gd.buff!m.gd.raster.size := g.gd.buff!m.gd.raster.size + 1
           IF g.gd.buff!m.gd.raster.size > m.gd.raster.types
           THEN g.gd.buff!m.gd.raster.size := 1

           MOVE (string!(g.gd.buff!m.gd.raster.size), g.gd.buff+m.gd.raster, 2)
        $)
$)

AND data.init(box) BE
$( TEST box = m.gd.data
   THEN TEST g.context!m.oldfile
        THEN $( LET tag = ?
                tag := VALOF SWITCHON g.gd.buff!m.gd.datatype INTO
                $( CASE m.gd.categorised :
                   CASE m.gd.incidence   :
                   CASE m.gd.absolute    :
                   CASE m.gd.ratio       :
                   CASE m.gd.percentage  :
                   CASE m.gd.means       : RESULTIS true
                   DEFAULT               : RESULTIS false
                $)
                TEST tag
                THEN g.gd.buff!m.gd.datatype := g.gd.buff!m.gd.datatype
                ELSE $( g.key := -m.st.inputed
                        g.sc.ermess ("Invalid data: cannot identify data type")
                     $)
             $)
        ELSE g.gd.buff!m.gd.datatype := m.gd.absolute
   ELSE g.gd.buff!m.gd.raster.size := g.gd.buff!m.gd.raster.size - 1

   next.string (box)
   g.gd.buff!m.gd.cycstr := true
$)
.

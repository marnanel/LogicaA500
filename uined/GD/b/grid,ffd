SECTION "GridH - header action"

/**
         GRID HEADER ACTION ROUTINE
         --------------------------

         This section contains :

            G.gr.gridh and its utility routines

         NAME OF FILE CONTAINING RUNNABLE CODE:

         r.Gridh

         REVISION HISTORY:

         DATE     VERSION  AUTHOR      DETAILS OF CHANGE
         17.6.87     1       SA        Initial version
         23.6.87     2       SA        New menu bar control
         29.6.87     3       SA        Modified general validation routine
**/


GET "libhdr"
GET ":4.UINED.gh.glhd"
GET ":4.UINED.gh.glGDhd"
GET ":4.UINED.gh.glGRhd"
GET ":4.UINED.h.sdhd"
GET ":4.UINED.h.sihd"
GET ":4.UINED.h.kdhd"
GET ":4.UINED.h.grhhd"

/**
         G.GR.GRIDH - SET UP HEADER PAGE
         -------------------------------

         Specific action routine for grid header

         INPUTS:

         none

         OUTPUTS:

         none

         GLOBALS MODIFIED:

         contents of g.gd.buff


         SPECIAL NOTES FOR CALLERS:

         none

         PROGRAM DESIGN LANGUAGE:

         G.gr.gridh []
         -------------

         IF state justselected
         THEN call initialise routine
         ENDIF

         <Take action depending on function key>

         CASE OF key
            Function 4 : show ranges
                         allow edits
                         ENDCASE
            Function 3 :
            Function 5 : IF data not valid
                         THEN key = no action
                         ENDCASE
            Default    :
         <Take action depending on screen state>

         CASE OF screen state
            0 :   entry mode - do nothing
            1 :   find current box
                  last box = Current box
                  IF current box =  unknown
                  THEN IF key is alphanumeric
                       THEN beep
                  ELSE highlight last box
                       initialise for input
                       set screen state = 2
            2 :   IF last box = current box
                  THEN screen state = 3
                  ELSE de-highlight last box
                       set screen state = 1
            3 :   CASE OF last box
                   units              :
                   normalising factor : read input
                                        IF key = return
                                        THEN IF validate
                                             THEN screen state = 1
                                             ELSE warning message
                                        ENDCASE
                   data               :
                   area               : IF key = change
                                        THEN show next string
                                        IF last box ~= current box
                                        THEN screen state = 1
                                        IF box = data AND type = incidence
                                        THEN deal with incidence type
                                        ENDCASE
         default : screen state = 1
         ENDCASE
**/

LET G.gr.gridh() BE
$( LET boxes = TABLE m.sd.act, m.sd.wBlank, m.sd.act,
                     m.sd.act, m.sd.act, m.sd.act

   IF g.menubar!m.box1 = m.wExit
   THEN RETURN

   IF G.context!m.justselected
   THEN G.gr.inith()

   SWITCHON G.key INTO
   $( CASE m.kd.Fkey1 : ENDCASE
      CASE m.kd.Fkey4 : TEST NOT g.gd.buff!m.gd.ranges.set
                        THEN $( IF g.gd.buff!m.gd.entry.mode
                                THEN $( g.key := m.kd.return
                                        handle.states ()
                                        g.key := m.kd.Fkey4
                                     $)
                                IF g.gd.check.class.intervals() DO
                                $( g.sc.clear (m.sd.message)
                                   g.gd.buff!m.gd.ranges.set := true
                                   screen (0)
                                $)
                             $)
                        ELSE $( IF valid.for.next.state() DO
                                screen(4)
                             $)
                        ENDCASE
      CASE m.kd.Fkey3 :
      CASE m.kd.Fkey5 :
      CASE m.kd.Fkey6 : TEST valid.for.next.state()
                        THEN g.gd.save ()
                        ELSE g.key := m.kd.noact
                        ENDCASE
      DEFAULT         : handle.states()
                        ENDCASE
   $)

   TEST (g.gd.buff!m.gd.ranges.set) &
        (g.gd.buff!m.gd.datatype ~= m.gd.incidence)
   THEN boxes!m.box4 := m.sd.act
   ELSE $( UNLESS g.gd.buff!m.gd.ranges.set
           THEN boxes!m.box4 := m.sd.wClear
           IF g.gd.buff!m.gd.datatype = m.gd.incidence
           THEN boxes!m.box4 := m.sd.wBlank
        $)

   IF g.redraw |
      (g.menubar!m.box4 ~= boxes!m.box4)
   THEN g.sc.menu (boxes)
$)

AND handle.states() BE
$( IF g.gd.buff!m.gd.xpos ~= G.xpoint |
      g.gd.buff!m.gd.ypos ~= G.ypoint |
      g.gd.buff!m.gd.last.box ~= on.box()
   THEN g.gd.buff!m.gd.status := m.gd.on

   SWITCHON g.gd.buff!m.gd.screenstate INTO
   $( CASE 1 : UNLESS (on.box() = m.gd.unknown) |
                      (g.gd.buff!m.gd.status = m.gd.off)
               $( LET box = g.gd.buff!m.gd.box
                  LET g = G.key
                  g.gd.buff!m.gd.last.box := box
                  G.key := m.kd.noact           // initialise boxes - no action
                  TEST type (box) = m.gd.entry
                  THEN $( g.gd.highlight (box, m.sd.cyan, m.sd.blue)
                          g.gd.char.input(box)
                       $)
                  ELSE g.gd.cycle (box, m.sd.yellow)
                  g.gd.buff!m.gd.status := m.gd.on
                  G.key := g
                  screen(2)
               $)
               ENDCASE
      CASE 2 : $( LET box  = g.gd.buff!m.gd.last.box
                  TEST (on.box() = box) & (g.gd.buff!m.gd.status = m.gd.on)
                  THEN $( g.gd.buff!m.gd.oldstr := true
                          screen(3)
                       $)
                  ELSE $( TEST type(box) = m.gd.entry
                          THEN g.gd.highlight (box, m.sd.blue, m.sd.yellow)
                          ELSE $( LET g = G.key
                                  G.key := m.kd.noact
                                  g.gd.cycle (box, m.sd.cyan)
                                  IF g.gd.buff!m.gd.datatype = m.gd.incidence &
                                     g.context!m.data.type ~= m.gd.incidence &
                                     g.context!m.oldfile
                                     THEN
                         $( g.gd.highlight (m.gd.incid, m.sd.blue, m.sd.yellow)
                            g.gd.buff!m.gd.firstincid := true
                         $)
                                  G.key := g
                               $)
                          screen(1)
                       $)
               $)
               ENDCASE
      CASE 3 : $( LET box = g.gd.buff!m.gd.last.box
                  SWITCHON box INTO
                  $( CASE m.gd.units  :
                     CASE m.gd.nfac   : entry (box)
                                       ENDCASE
                     CASE m.gd.data   :
                     CASE m.gd.raster : cycle (box)
                                       ENDCASE
                  $)
               $)
               ENDCASE

      CASE 4 : g.gd.ranges()
               ENDCASE
      default: screen(1)
   $)
$)

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//                  Utility routines used by AREA only                       //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

// returns true if all values entered are consistent
AND valid.for.next.state() = VALOF
$( LET y = G.ypoint
   LET g = G.key

   IF g.gd.buff!m.gd.screenstate > 1
   THEN $( G.ypoint := 0
           G.key := m.kd.return
           handle.states()
           G.ypoint := 1
           G.key := m.kd.noact
           handle.states()
           G.key := g
           G.ypoint := y
        $)
   IF 1 < g.gd.buff!m.gd.screenstate < 4
   THEN RESULTIS false
   IF g.gd.buff!m.gd.screenstate = 4
   THEN UNLESS g.gd.check.class.intervals() RESULTIS false

   UNLESS g.gd.valid (m.gd.nfac) RESULTIS false
   TEST g.context!m.oldfile
   THEN IF g.context!m.data.type  ~= m.gd.incidence &
           g.gd.buff!m.gd.datatype = m.gd.incidence
        THEN UNLESS g.gd.valid (m.gd.incid) RESULTIS false
   ELSE IF g.gd.buff!m.gd.datatype = m.gd.incidence
        THEN UNLESS (g.gd.buff%(m.gd.nfac*bytesperword+m.lsb) = 1) &
                    (g.gd.buff%(m.gd.nfac*bytesperword+m.msb) = '0')
             THEN $( g.sc.ermess ("Set norm. factor to zero for incidence")
                     RESULTIS false
                  $)

   RESULTIS true
$)

// controls highlighting and input to entry boxes in screen state 3
AND entry (box) BE
$( TEST g.key = m.kd.noact |
        g.key = m.kd.up    |
        g.key = m.kd.down
   THEN IF g.gd.buff%(box*bytesperword) = 0 | g.gd.buff!m.gd.oldstr
        THEN IF on.box() ~= box             // if moved off box without editing
             THEN screen(2)
   ELSE $( g.gd.char.input(box)
           g.gd.buff!m.gd.oldstr := false
        $)
   IF g.key = m.kd.return
   THEN TEST g.gd.valid (box)
        THEN $( g.gd.buff!m.gd.status := m.gd.off
                g.gd.buff!m.gd.xpos   := G.xpoint
                g.gd.buff!m.gd.ypos   := G.Ypoint
                IF box = m.gd.nfac
                THEN $( LET one = vec 1

                        g.ut.set32(1, 0, one)
                        g.sc.clear (m.sd.message)
                        g.sc.movea (m.sd.message, 0, 0)
                        g.sc.selcol (m.sd.cyan)
                        g.sc.rect (m.sd.plot, m.sd.mesw-1, m.sd.mesh-1)
                        g.sc.movea (m.sd.message, 0, m.sd.mesYtex)
                        g.sc.selcol (m.sd.blue)
                        g.sc.opnum (one, g.gd.buff!m.gd.norm, 40)
                     $)
                screen(2)
             $)
        ELSE $( LET g = G.key
                IF box = m.gd.nfac
                THEN $( LET ptr = VEC 3
                        g.sc.savcur (ptr)
                        g.sc.clear (m.sd.message)
                        g.sc.rescur (ptr)
                     $)
                G.key := m.kd.noact
                g.gd.char.input (box)
                G.key := g
             $)
$)

// controls highlighting of cycle fields and calls to g.gd.incidence()
AND cycle (box) BE
$( TEST screen.unlocked (box)
   THEN screen(2)
   ELSE $( TEST g.key = m.kd.change
           THEN $( IF g.gd.buff!m.gd.datatype = m.gd.incidence DO
                   $( g.gd.highlight (m.gd.incid, m.sd.black, m.sd.black)
                      g.gd.buff!m.gd.firstincid := true
                      g.gd.buff!m.gd.readreply  := false
                      g.gd.buff!m.gd.reply      := 0
                      g.gd.buff!m.gd.incid      := 0
                   $)
                   g.gd.cycle (box, m.sd.yellow)
                $)
           ELSE IF box = m.gd.data & g.gd.buff!m.gd.datatype = m.gd.incidence
                THEN g.gd.incidence()
        $)
$)

// returns result on whether a cycle field is locked or not
// with special case for incidence entry box
AND screen.unlocked (box) = VALOF
$( IF on.box() = box THEN RESULTIS false
   IF (g.context!m.data.type ~= m.gd.incidence) &
       ((box = m.gd.data) & (g.gd.buff!m.gd.datatype = m.gd.incidence) &
        (g.gd.buff%(bytesperword*m.gd.incid) ~= 0))
      RESULTIS false
   RESULTIS true
$)

// Return identifier to the field the cursor is on - except for incidence data
AND on.box() = VALOF
$( LET box = m.gd.unknown
   IF (m.gd.nfacY -m.sd.linW <= G.ypoint <=  m.gd.nfacY)
      THEN UNLESS g.context!m.data.type = m.gd.incidence THEN box := m.gd.nfac
   IF (m.gd.dataY -m.sd.linW <= G.ypoint <=  m.gd.dataY) THEN box := m.gd.data
   IF (m.gd.rasterY -m.sd.linW <= G.ypoint <=  m.gd.rasterY)
      THEN UNLESS g.context!m.oldfile                   THEN box := m.gd.raster
   IF (m.gd.unitsY-m.sd.linW <= G.ypoint <= m.gd.unitsY) THEN box := m.gd.units
   g.gd.buff!m.gd.box := box
   RESULTIS box
$)

// returns type of current field
AND type (box) = VALOF SWITCHON box INTO
$( CASE m.gd.data    :
   CASE m.gd.raster  : RESULTIS m.gd.cycle
   CASE m.gd.nfac    :
   CASE m.gd.units   : RESULTIS m.gd.entry
   CASE m.gd.unknown :
   DEFAULT           : RESULTIS m.gd.unknown
$)

AND screen(state) BE g.gd.buff!m.gd.screenstate := state
.

// /**
//       GLHDR - GLOBALS HEADER
//       ----------------------
//
//       This is the master system Global definition file
//       Every module should "GET" this header file to ensure no
//       clashes of global variables. No globals may be declared
//       anywhere else in the system, apart from the overlay
//       globals files glCMhdr, glNFhdr etc.
//
//       Changes made for the UNIfied code system 24.4.87
//
//       REVISION HISTORY:
//
//       DATE      VERSION  AUTHOR   DETAILS OF CHANGE
//       23.4.87   1        PAC      ADOPTED FOR UNI SYSTEM
//       30.4.87   2        DNH      add g.ut.diag etc
//       1.5.87    3        DNH      g.he.exit -> g.ov.helpexit
//       27.5.87   4        PAC      De-overlay globals for AES
//        9.6.87   5        PAC      Updates from UNI
//       11.6.87   6        PAC      Update package globals
//       17.6.87   7        PAC      Update NP globals
//       23.7.87   8        PAC      New mouse global
//       15.9.87   9        PAC      ADOPTED FOR DISH SYSTEM
//       30.3.88   10       SA       Globals for new WIMP routines
//       31.3.88   11       PAC      Globals for BICI, etc.
//       07.04.88  12       SA       global for m.wm.movea & redraw flag
//       08.04.88  13       SA       g.wm.Force.Redraw added
//       18.04.88  14       SA       g.wm.Update.Window added
//       19.04.88  15       SA       added sprite utilities
//       16.05.88  15       SA       added G.wm.MoveA
//       16.05.88  16       SA       added G.wm.Clear.Mess
// **/

//$$DEBUG    // SYSTEM WIDE DEBUG FLAG FOR CONDITIONAL COMPILATION
$$FLOPPY   // THIS TAG CONTROLS THE LOAD OF 'WORDS' & OVERLAYS FROM ADFS

MANIFEST $(

FG=FIRSTFREEGLOBAL

//  OFFSETs for G.Context

m.state     = 0  // Current state
m.laststate = 1  // Previous state
m.discid    = 2  // Videodisc identifier
m.stackptr  = 3  // stack pointer for exit stack
m.leveltype = 4  // level and type, see On Disc Data Structures
m.grbleast  = 5  // grid ref, bottom left Easting
m.grblnorth = 6  // grid ref, bottom left Northing
m.grtreast  = 7  // grid ref, top right Easting
m.grtrnorth = 8  // grid ref, top right Northing
m.frame.no  = 9  // video disc frame number
m.page.no   =10  // page number for essays
m.picture.no=11  // picture number for picture sets
m.areal.unit=12  // current areal unit, 0 implies grid square data
m.resolution=13  // 1-10km resolution of dataset,


// gap where itemname used to be...

m.itemrecord=16  // current record from item names file
                 // 36 bytes long: 1st 31 bytes = item name string;
                 // %31 is item type; %32-%35 is itemaddress
m.itemtypeoff = m.itemrecord*bytesperword + 31    // byte offset
m.itemaddress = m.itemrecord + 32/bytesperword    // word offset

m.flags      =34 // flags for general use, esp. menu bar config for CFind
m.underlay.frame.no= 35 // Current Underlay map frame number
// gap where hierarchy stuff was...   (36,37,38)
m.maxstates  =39 // number of states in state table
m.justselected=40// flag if pending state change used
m.maprecord  =41 // map record for community disc
m.exitstack  =42 // Stack of exits from special state changes
                 // i.e HELP, Forced AREA and ITEM examination
m.constack   = 4 // Size of context exit stack - n.b. no extra space now

// gap where hierarchy stuff was...  (46,47)
m.itemselected=48 // item examination entry flag

m.xpos = 49      // used by G.SC.INPUT - xpos of box start
m.curpos = 50    // ditto - pos of cursor along string
m.map.no = 51    // Frame number of current map
m.name.AOI = 52  // Code from Gazetteer
m.type.AOI = 53  // ditto

m.itemadd2   = 54 // item addresses for chained essays
m.itemadd3   = 56

// new entries for DISH
//
m.key       =57 // replaces G.key
m.icon      =58 // currently selected icon
m.window    =59 // currently selected window
m.dialogue  =60 // window handle of dialogue box, if it's there
m.menu      =61 // pointer to current menu data record
m.reason.code=62 // last reason code from poll_wimp
m.current.op =63 // current operation code
m.help.requested=64 // added 31.3.88 PAC - flag to signal entry to SS2
m.redraw = 66  // flag to signal a request for redraw by the 'redraw.handler'
               // SA 07.04.88

m.contextsize=70 // Size of this area at getvec parameter

// offsets from g.menubar
// these contain the box status (active,inactive,clear,etc.)
m.box1 =0  // menu bar box1...
m.box2 =1
m.box3 =2
m.box4 =3
m.box5 =4
m.box6 =5
m.menubarsize = 5 // Size of this area as getvec parameter

// results from g.ut.cmp32
// BEWARE ***  these are duplicated in UT.a.calc32 and
// in NN assembler somewhere
m.lt = -1   // a < b
m.eq =  0   // a = b
m.gt =  1   // a > b

$)

GLOBAL $(

//******* state table *********

G.states        :FG+0       // DISH state table

//******* system data areas *********

G.windows        :FG+1       // list of active windows

G.ov.initialise.system :FG+2
G.ov.top.level.loop    :FG+3
G.sys.windows          :FG+4

// spare bits here

G.menuwords     :FG+7    // array of menu words - use for menu data in DISH
G.menubar       :FG+8    // pointer to menu bar box data
G.menuon        :FG+9    // menu bar status (true=on/false=off)
G.redraw        :FG+10   // redraw menu bar flag (true=redraw)
G.screen        :FG+11   // co-ord system (menu,display or message)
// G.key           :FG+12   // last keypress
G.Xpoint        :FG+13   // last X position
G.Ypoint        :FG+14   // last Y position
G.Context       :FG+15   // pointer to context data area

//******* top level control *********

G.dy.Init       :FG+16   // Dynamic routines, redefine for specific states
G.dy.Free       :FG+17
G.dy.action     :FG+18

G.ov.helpexit   :FG+19
G.ov.add.to.window.list :FG+20
G.ov.load       :FG+21
G.ov.exit       :FG+22   // Exit routine for special exits,
                         // must be in Root

//******* primitives *********

G.dh.close           :FG+23
G.dh.length          :FG+24
G.dh.fstype          :FG+25
G.dh.open            :FG+26
G.dh.read            :FG+27
G.dh.readframes      :FG+28
G.dh.reset           :FG+29
G.dh.discid          :FG+30   // Disc side detect
G.dh.SCSI.error      :FG+31   // get last SCSI error from LV-DOS
G.dh.select.disc     :FG+32   // eject disc and initialise another

G.ud.open            :FG+33
G.ud.read            :FG+34
G.ud.delete.file     :FG+35
G.ud.read.frames     :FG+36
G.ud.open.file       :FG+37
G.ud.close.file      :FG+38
G.ud.write           :FG+39
G.ud.do.32.line      :FG+40

G.sc.spacing         :FG+41  // pointer to proportional spacing lookup table
G.sc.addspace        :FG+42  // flag for opage. THIS IS DATA !

G.sc.getact          :FG+43 // get user's action
G.sc.mouse           :FG+44 // mouse handler
G.sc.moveptr         :FG+45 // move mouse pointer
G.sc.pointer         :FG+46 // turn mouse pointer on/off

G.sc.btod            :FG+47 // BBC->Domesday co-ords
G.sc.dtob            :FG+48 // Domesday->BBC co-ords
G.sc.mode            :FG+49 // set screen mode
G.sc.findmode        :FG+50 // inquire screen mode
G.sc.movea           :FG+51 // move absolute
G.sc.mover           :FG+52 // move relative
G.sc.linea           :FG+53 // draw line absolute
G.sc.liner           :FG+54 // draw line relative
G.sc.rect            :FG+55 // filled rectangle
G.sc.clear           :FG+56 // clear selected screen area
G.sc.sec             :FG+57 // sector (pie slice)
G.sc.triangle        :FG+58 // draw a filled triangle
G.sc.parallel        :FG+59 // draw a parallelogram
G.sc.savcur          :FG+60 // save cursor position
G.sc.rescur          :FG+61 // restore cursor position
G.sc.oprop           :FG+62 // output string proportionally spaced
G.sc.width           :FG+63 // inquire width of PS string
G.sc.ofstr           :FG+64 // output string with formatting
G.sc.odrop           :FG+65 // output text with drop shadow
G.sc.pixcol          :FG+66 // inquire pixel colour (POINT)
G.sc.palette         :FG+67 // change a single palette colour
G.sc.setpal          :FG+68 // set palette to a predefined mix
G.sc.selcol          :FG+69 // select a colour
G.sc.XOR.selcol      :FG+70 // select colour in XOR mode
G.sc.physical.colour :FG+71
G.sc.complement.colour:FG+72
G.sc.next.colour     :FG+73
G.sc.opage           :FG+74 // output text page with highlighting
G.sc.menu            :FG+75 // draw a menu bar
G.sc.input           :FG+76 // text input primitive
G.sc.opnum           :FG+77 // output a real number
G.sc.oplist          :FG+78 // output list item
G.sc.high            :FG+79 // highlight item number
G.sc.2high           :FG+80 // extra highlight for CT
G.sc.setfont         :FG+81 // special font for community text
G.sc.mess            :FG+82 // output a message
G.sc.ermess          :FG+83 // output an error message
G.sc.cachemess       :FG+84 // cache/restore message area
G.sc.icon            :FG+85 // display icon
G.sc.beep            :FG+86 // make a beep
G.sc.defwin          :FG+87 // select default graphics window
G.sc.setwin          :FG+88 // set a graphics window
G.sc.keyboard.flush  :FG+89 // flush the keyboard buffer

                            // sprite utilities  SA 20.04.88
G.sc.Get.User.Sprite :FG+90 // get sprite from user co-ordinates
G.sc.Put.Sprite      :FG+91 // plot sprite at graphics cursor position
G.sc.Put.User.Sprite :FG+92 // plot sprite at user co-ordinates
G.sc.Select.Sprite   :FG+93 // select sprite for subsequent plotting

// n.b. for the ARM, these globals can be anywhere
//
G.ut.add32           :FG+100  // 32 bit addition
G.ut.sub32           :FG+101  // 32 bit subtraction
G.ut.mul32           :FG+102  // multiply
G.ut.div32           :FG+103  // divide
G.ut.cmp32           :FG+104  // compare

G.ut.sequence.no     :FG+105  // file sequence no. for WRITE - data
G.ut.stream          :FG+106  // file handle for WRITE       - data

G.ut.get.ermess      :FG+107  // get error message text from IO processor
G.ut.save.mark       :FG+108  // load and ...
G.ut.load.mark       :FG+109  // ... save bookmark.
G.ut.videodisc.error :FG+110 // handle fatal error from disc
G.ut.abort           :FG+111 // file handle for trap to write to
G.ut.trap            :FG+112 // trap invalid parameter
G.ut.cache           :FG+113 // save and restore data to IO processor
G.ut.restore         :FG+114 // sideways RAM
// G.ut.srmove          :FG+115 // SRAM move block operation
G.ut.copy.screen     :FG+116 // shadow screen copying
G.ut.print           :FG+117 // print a line
G.ut.wait            :FG+118 // delay routine
G.ut.printingchar    :FG+119 // test for printable char
G.ut.write           :FG+120 // used for the WRITE primitive
G.ut.open.file       :FG+121 // ditto
G.ut.close.file      :FG+122 // ditto
G.ut.do.32.line      :FG+123 // special access to Write conversion
                             // routine for NM
G.ut.grid.region      :FG+124 
G.ut.grid.eight.digits:FG+125
G.ut.grid.mixed       :FG+126
G.ut.grid.letter.code :FG+127
G.ut.grid.to.string   :FG+128
G.ut.grid.trim        :FG+129

G.ut.set32           :FG+130  // new utilities for UNI system
G.ut.get32           :FG+131
G.ut.mov32           :FG+132
G.ut.align           :FG+133
G.ut.movebytes       :FG+134
G.ut.unpack16        :FG+135
G.ut.unpack16.signed :FG+136
G.ut.diag            :FG+137
G.ut.send.to.OS      :FG+138
G.ut.set.text.window :FG+139
G.ut.unpack32        :FG+140

// specially for NM: separate link
G.ut.set48           :FG+141
G.ut.get48           :FG+142
G.ut.mov48           :FG+143


G.vh.frame           :FG+144
G.vh.video           :FG+145
G.vh.play            :FG+146
G.vh.goto            :FG+147
G.vh.reset           :FG+148
G.vh.audio           :FG+149
G.vh.send.fcode      :FG+150
G.vh.word.asc        :FG+151 // conversion routine
G.vh.step            :FG+152 // *STEP command - pause player
G.vh.call.oscli      :FG+153 // send a command to operating system
G.vh.poll            :FG+154 // player status poll


// THESE SHOULD NOT BE HERE !!!!  ****
G.overbay            :FG+155
G.CacheVec           :FG+156
// spare             :FG+157
G.ov.general         :FG+158
G.ov.boot            :FG+159
G.ov.setup.sram      :FG+160 

// NOR SHOULD THESE  ****
G.sc.ecf             :FG+161
G.sc.blob            :FG+162
G.sc.dot             :FG+163
G.sc.char90          :FG+164
G.sc.initialise.mouse:FG+165
G.sc.sprite.area     :FG+166

// Window manager interface routines

// data areas
G.wm.s               :FG+170
G.wm.q               :FG+171
G.wm.sprite.area     :FG+172

// routines in wimp1
G.wm.init            :FG+173
G.wm.poll            :FG+174
G.wm.Mouse.Rectangle :FG+175
G.wm.Packstr         :FG+176
G.wm.unpackstr       :FG+177
G.wm.iconaddr        :FG+178
G.wm.Error           :FG+179
G.wm.Load.Template   :FG+180
G.wm.Read.Templates  :FG+181

// routines in wimp2
G.wm.Update          :FG+182
G.wm.Redraw          :FG+183
G.wm.Get.Rectangle   :FG+184
G.wm.Get.Window.State:FG+185
G.wm.Get.Window.Info :FG+186
G.wm.Dialogue.Box    :FG+187
G.wm.Set.to.Front    :FG+188
G.wm.Close           :FG+189
G.wm.Message         :FG+190
G.wm.Highlight       :FG+192
G.wm.Set.Icon.State  :FG+193
G.wm.Create.Menu     :FG+194
G.wm.Alloc           :FG+195
G.wm.Create.Icon     :FG+196   //SA 30.03.88
G.wm.Delete.Icon     :FG+197   //SA 30.03.88
G.wm.Get.Icon.Info   :FG+198   //SA 30.03.88
G.wm.Set.Extent      :FG+199   //SA 30.03.88
G.wm.MoveA.Window    :FG+200   //SA 07.04.88
G.wm.Force.Redraw    :FG+201   //SA 08.04.88
G.wm.Update.Window   :FG+202   //SA 18.04.88
G.wm.MoveA           :FG+203   //SA 16.05.88
G.wm.Clear.Mess      :FG+204   //SA 16.05.88

// .. in wimp 3
G.wm.Get.Action      :FG+205 // name changed 31.3.88 PAC

// spare globals area - up to 210 at present (change FOG)

$)

MANIFEST
$(
   // UN-overlaid globals start here
   // to OVERLAY these globals, simply change the offsets
   // to zero.

   FOG  = FG + 210
   FGDY = FOG         // dy.inits   - size is 27 words + 3 spare
   FGCF = FOG  + 30   // CF globals - size is 23
   FGCM = FGCF + 23   // CM globals - size is 64
   FGCP = FGCM + 64   // CP globals - size is 42
   FGNA = FGCP + 42   // NA globals - size is 8
   FGNC = FGNA + 8    // NC globals - size is 30 + 10 spare
   FGNE = FGNC + 40   // NE globals - size is 9
   FGNF = FGNE + 9    // NF globals - size is 16
   FGNM = FGNF + 16   // NM globals - size is 170
   FGNP = FGNM + 170  // NP globals - size is 6
   FGNT = FGNP + 6    // NT globals - size is 21
   FGNV = FGNT + 21   // NV globals - size is 0
   FGNW = FGNV + 0    // NW globals - size is 0
   FGHE = FGNW + 0    // HE globals - size is 27
   FGBI = FGHE + 27   // BI globals - size is 16

   last.of.the.globals = FGBI + 16
   // ...that makes a total of 409 globals here
$)

GLOBAL $( G.Dummy   :last.of.the.globals $)

//  Note must be highest global number
//  since is referenced in Kernel, and
//  so defines size of GLOBAL vector
//  If this global is changed, then a relink of
//  Kernel is necessary.

//   ***  The End  ***

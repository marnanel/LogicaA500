//  AES SOURCE  6.87

/**
         NM.RETR2 - RETRIEVE SUB-OPERATION FOR MAPPABLE DATA
         ---------------------------------------------------

         NAME OF FILE CONTAINING RUNNABLE CODE:

         cnmRETR

         REVISION HISTORY:

         DATE     VERSION  AUTHOR      DETAILS OF CHANGE
         14.04.86 1        D.R.Freed   Initial version

         g.nm.gridref
         g.nm.unit
**/

section "nmretr2"
get "libhdr"
get ":4.DSH.GH.glhd"
get ":4.DSH.GH.glNMhd"
get ":4.DSH.H.sihd"
get ":4.DSH.H.sdhd"
get ":4.DSH.H.kdhd"
get ":4.DSH.H.nmhd"

get ":4.DSH.H.nmrehd"


/*
      g.nm.gridref ()

            handles the grid ref state of the retrieve operation
*/

let g.nm.gridref () be
$(
   let easting, northing, entry.state   =  ?, ?, ?
   let grid.eight =  vec 10/BYTESPERWORD
   let grid.mixed =  vec 10/BYTESPERWORD

   if (g.key = m.kd.return) & (g.screen = m.sd.display) &
      g.nm.id.grid.pos (@easting, @northing, @easting, @northing) then

      $(
         entry.state := g.sc.pointer (m.sd.off)
         g.ut.grid.eight.digits (easting, northing, grid.eight)
         g.ut.grid.mixed (easting, northing, grid.mixed)
         g.sc.mess (" %s  National Grid Ref  %s", grid.eight, grid.mixed)
         g.sc.pointer (entry.state)
      $)

   if (g.key = m.kd.fkey3) then   // Sum or Values function
      change.to.mark.state (g.nm.s!(m.nm.menu + m.box3),
                            m.wclear, m.wgridref)

   if (g.key = m.kd.fkey6) then
      g.nm.to.write (m.sd.act, m.wgridref)
$)


/*
      g.nm.unit ()

            handles the unit state of the retrieve operation;
            displays the name of the areal unit
*/

and g.nm.unit () be
$(
   let easting, northing, entry.state  =  ?, ?, ?
   let grid.str   =  vec 5

   if (g.key = m.kd.return) & (g.screen = m.sd.display) &
      g.nm.id.grid.pos (@easting, @northing, grid.str, grid.str) then

      $(
         entry.state := g.sc.pointer (m.sd.off)
         g.nm.s!m.area.no := 0

         // retrieve area number of this grid square
         g.nm.retrieve.values (easting, northing, easting, northing)

         test (0 < g.nm.s!m.area.no <= g.nm.s!m.nm.nat.num.areas) then
            $(   // get name string for this area number from gazetteer
               let name = vec 40 / BYTESPERWORD

               g.sc.mess (g.nm.get.area.name (g.nm.s!m.area.no, name))
            $)
         else
            g.sc.ermess ("Unclassified area")

         g.nm.position.videodisc ()
         g.sc.pointer (entry.state)
      $)

   if (g.key = m.kd.fkey3) then   // Values function
      change.to.mark.state (m.wvalues, m.wclear, m.wunit)

   if (g.key = m.kd.fkey6) then
      g.nm.to.write (m.sd.act, m.wunit)
$)


/*
      change.to.mark.state

         changes the state of the local state machine for the Retrieve
         operation from a non-marking state to a marking state and
         performs the associated housekeeping
*/

and change.to.mark.state (new.state, box3, box5) be
$(
   g.nm.s!m.local.state := new.state
   g.nm.s!(m.nm.menu + m.box3) := box3
   g.nm.s!(m.nm.menu + m.box5) := box5
   g.sc.menu (g.nm.s + m.nm.menu)
   g.nm.restore.message.area ()
$)

.

//  AES SOURCE  6.87

/**
         NM.FPWRITE - LIBRARY FLOATING POINT NUMBER WRITE
         ------------------------------------------------

         NAME OF FILES CONTAINING RUNNABLE CODE:

         cnmRETR
         cnmCORR

         REVISION HISTORY:

         DATE     VERSION  AUTHOR   DETAILS OF CHANGE
         21/08/86 1        D.R.Freed   Initial version
         14.7.87     2     DNH      Remove needs & fphdr get
         31.7.87     3     PAC      Fix routine redefinition -
                                    only do it in mode 2
**/

section "nmfpwrite"

get "libhdr"
get ":4.DSH.GH.glhd"
get ":4.DSH.GH.glNMhd"
get ":4.DSH.H.sdhd"
get ":4.DSH.H.nmhd"

static
$(
   s.oldWRCH   =  ?  // for redefinition of MOS WRCH routine
$)


/**
         G.NM.FPWRITE - WRITE FLOATING POINT NUMBER
         ------------------------------------------

         Displays a floating point number at the current
         graphics position using the specified floating point
         procedure and temporary redefinition of the MOS
         routine WRCH.

         INPUTS:

         Pointer to floating point write routine
            (WRITEFP or WRITESG)
         3 normal arguments for the write routine

         OUTPUTS:

         none

         GLOBALS MODIFIED:

         none

         SPECIAL NOTES FOR CALLERS:

         Machine specific because of the WRCH definition and
         VDU call.

         PROGRAM DESIGN LANGUAGE:

         g.nm.fpwrite [routine.ptr, arg1, arg2, arg3]
         ------------

         turn off mouse pointer
         save old address of WRCH
         redefine WRCH
         display fp number using routine.ptr via new WRCH
         restore old WRCH
         restore mouse pointer
**/


let g.nm.fpwrite (routine.ptr, arg1, arg2, arg3) be
$(
   let   entry.state =  ?
   let   screen.mode = G.sc.findmode()

   // turn off mouse pointer since we are not using the screen driver
   entry.state := g.sc.pointer (m.sd.off)

   IF screen.mode = 2 THEN 
   $(
   // temporarily redefine the MOS write character routine to handle the
   // special mode 2 character set
   s.oldWRCH := WRCH
   WRCH := newWRCH
   $)

   // call WRITESG or WRITEFP, indirectly using routine
   // pointer parameter, with its normal parameters
   routine.ptr (arg1, arg2, arg3)

   IF screen.mode = 2 THEN
   $(
   // restore MOS routine
   WRCH := s.oldWRCH
   $)

   // restore mouse pointer
   g.sc.pointer (entry.state)
$)


/*
      newWRCH

         temporary replacement for MOS WRCH routine to allow use of fp
         output in special mode 2 character set
*/

and newWRCH (ch) be
$(
   s.oldWRCH (ch | #x80)   // set top bit for redefined character set
   VDU ("25,0,-32;0;")     // move backwards 1/2 a char
$)

.


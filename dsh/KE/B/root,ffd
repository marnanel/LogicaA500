//  AES SOURCE  4.87

/**
         ROOT - ROOT OF ALL OVERLAYS
         ---------------------------

         NAME OF FILE CONTAINING RUNNABLE CODE:

         s.kernel

         REVISION HISTORY:

         DATE     VERSION  AUTHOR   DETAILS OF CHANGE
         24.9.87  1        PAC      Initial DISH version
         31.3.88  2        PAC      Structural changes for BICI
**/

SECTION "root"

GET"LIBHDR"
GET":4.DSH.GH.glhd"
GET":4.DSH.GH.gldyhd"
GET":4.DSH.H.sthd"
GET":4.DSH.H.st2hd"
GET":4.DSH.H.sdhd"
GET":4.DSH.H.sdphd"
GET":4.DSH.H.kdhd"
GET":4.DSH.H.vhhd"
GET":4.DSH.H.dhhd"
GET":4.DSH.H.ovhd"
GET":4.DSH.H.uthd"  
GET":4.DSH.H.iophd"
GET":4.DSH.H.wmhd"

// N.B. this version of start() will only be called 
// if BICI hasn't got linked with the system - it allows
// testing of Domesday without the prolog system
// PAC 1.4.88

Let start() be
$(
   G.ov.initialise.system()

   $( G.ov.top.level.loop() $) REPEAT
$)


LET G.ov.initialise.system () BE
$(
    main.init ()   // set up vectors and do machine-specific init

    g.ov.boot()    // load first overlay, etc.      

//    IF G.dh.fstype() = m.dh.vfs THEN - no startup film for DISH
//        startup.film()

$)


/**
         MAIN.INIT - GENERAL INITIALISATION ROUTINE
         ------------------------------------------

         Responsible for all Domesday initialisations,
         especially GETVECs for system areas.

         GLOBALS MODIFIED:

         GETVECs are performed for the following globals:

         G.stover
         G.stactr
         G.sttran
         G.stinit
         G.stmenu
         G.Context
         G.menuwords  
         G.ComCache
         G.NatCache

         SPECIAL NOTES FOR CALLERS:

         PROGRAM DESIGN LANGUAGE:

         main.init[]
         -----------

         GETVEC for all global areas permanently resident
         Load state tables
         Call machine specific initialisation
         RETURN

**/

AND main.init() BE
$(
   LET p = ?

   Debug(0)

   G.states := load.file("STATES")+2               // load state tables 

   G.Context  := GETVEC( m.contextsize )           // system context vector
   G.Menubar  := GETVEC( m.menubarsize )           // system menubar
   G.Windows  := GETVEC( m.wm.windowsize )         // window manager
   G.sys.windows := GETVEC( m.wm.sys.windows.size ) // extra windows
   G.wm.q     := GETVEC( m.wm.window.buf.words )
   G.wm.s     := GETVEC( m.wm.statics.size )
   G.CacheVec := GETVEC( m.io.cachesize/bytesperword )           
   G.wm.sprite.area := GETVEC( m.wm.sprite.size )  // wimp sprites
   G.sc.sprite.area := GETVEC( m.sd.sprite.ws.size/bytesperword )

   IF G.sc.sprite.area = 0 THEN G.ut.abort( m.ut.init.abort+1 )

   IF (G.Context=0)  |
      (G.windows=0)  |
      (G.sys.windows=0) |
      (G.wm.q=0)     |
      (G.wm.s=0)     |
      (G.Cachevec=0) |
      (G.wm.sprite.area=0) |
      (G.sc.sprite.area=0) DO G.ut.abort( m.ut.root.abort )

   G.IN.dy.init()  // this does all the work for init

   G.wm.Init() // set up the wimp system

   G.dy.init := G.dummy  // set these to a safe value
   G.dy.free := G.dummy  // before boot gets started
$)


/*
         load.file() returns a pointer to the vector allocated
         for the file name specified. Aborts if file is not
         found. It is used for loading tables, but NOT code.
         Has ADFS checking under $$floppy tag.
*/

AND load.file( name ) = VALOF
$(
   LET v = 0

$<floppy
   LET buf = VEC 20/BYTESPERWORD
   v := FILETOVEC( concat.("-adfs-", name, buf) )
$>floppy

   IF v = 0 THEN
      v := FILETOVEC( name )

   IF v = 0 THEN
   $( G.sc.mess("Failed to load %S, reason %N", name, RESULT2 )
      G.ut.abort( m.ut.root.abort )
   $)
   RESULTIS v
$)

$<floppy
AND concat.( s1, s2, buf ) = VALOF
$(
   g.ut.movebytes (s1, 1, buf, 1,      s1%0)
   g.ut.movebytes (s2, 1, buf, s1%0+1, s2%0)
   buf%0 := s1%0 + s2%0
   resultis buf
$)
$>floppy


/**
         G.ov.top.level.loop - Top level loop
         ------------------------------------

         This is the top level control loop of the Domesday
         retrieval software.

         INPUTS: None

         OUTPUTS: None

         GLOBALS MODIFIED:

         G.Context -- the current context of the state machine
         G.context!m.key  -- last keypress
         G.xpoint  -- screen x position
         G.ypoint  -- screen y position

         SPECIAL NOTES FOR CALLERS:

         Only returns if 'expert' help is requested by user

         PROGRAM DESIGN LANGUAGE:

         START []
         --------

         Load initial overlay
         Play startup film
         Set initial state
         WHILE stop request not confirmed
           WHILE keypress NOT EQUAL stop request
             get action request
             handle state specific actions
             handle general action (e.g. state transition
                                          requests)
           ENDWHILE
        ENDWHILE
**/


AND G.ov.top.level.loop() BE
$(

// ******************************************************* //
//                                                         //
//       MAIN LOOP OF DOMESDAY RETRIEVAL SOFTWARE          //
//                                                         //
// ******************************************************* //

/************
   $(
      $(
************/

  G.context!m.help.requested := FALSE

         $(
            G.wm.Get.Action() // was  G.sc.getact()
            G.dy.action()
            G.ov.general()
$<debug
            IF G.context!m.key = 4 debug(0) // on ctrl-d
$>debug       

         $) REPEATUNTIL G.context!m.help.requested // goes back to DISH


/********************************

         $) REPEATUNTIL G.context!m.key=m.kd.stop

      $) REPEATUNTIL restart.query() = 'R'

      g.ov.boot()  // reset G.Context and get initial overlay

   $) REPEAT  // forever...
*********************************/

$)


// ask the user if he wants to restart the system
// procedure result is 'R' only if R or r is pressed
// in response to the question.

AND restart.query() = VALOF
$(
   LET question  = "Type R to restart or C to continue:"
   LET width     = G.sc.width( question ) + m.sd.charwidth
   LET ch = ?

   // a few dummy reads to clear out the keyboard buffer
   UNTIL read.ch() = m.kd.noact LOOP

   G.sc.cachemess(m.sd.save)
   G.sc.mess( question )

   ch := CAPCH( read.ch() )        // get the response
   REPEATUNTIL ch ~= m.kd.noact

   TEST ch = 'R'
   THEN
   $(  G.sc.movea(m.sd.message, width, m.sd.mesYtex)
       G.sc.ofstr("R")
   $)
   ELSE G.sc.cachemess(m.sd.restore)

   RESULTIS ch
$)


// play startup film
// N.B. This code assumes a cold boot has just occurred
// and that video mode is hence VP 3 (dy.init of startup state
// must not alter this).

AND startup.film() BE
$(
   LET db1 = ?
   LET key = m.kd.noact
   LET discid    = G.context!m.discid
   LET reply.buf = VEC m.vh.poll.buf.words

   G.sc.clear(m.sd.message)        // clear 'starting' message 26.9.86 PAC  

   // a few dummy reads to clear out the keyboard buffer

   $<debug IF FALSE DO $>debug
   UNTIL read.ch() = m.kd.noact LOOP

   $<debug IF read.ch() = m.kd.stop RETURN $>debug

   G.vh.audio(m.vh.both.channels)  // switch on both audio channels

   TEST discid = m.dh.NatA
   THEN G.vh.play( m.ov.nfilmS, m.ov.nfilmE )      // play national film
   ELSE IF (discid = m.dh.south) | (discid = m.dh.north)
        THEN G.vh.play( m.ov.cfilmS, m.ov.cfilmE ) // play community film

   $(wait

      key := read.ch()
      db1 := G.vh.poll(m.vh.read.reply,reply.buf)

   $)wait REPEATUNTIL (key = m.kd.stop) |
                  (db1 = m.vh.finished) $<debug | (CAPCH(key)='Q') $>debug

   IF db1 ~= m.vh.finished THEN G.vh.send.fcode("X")

   G.vh.audio( m.vh.no.channel )
$)


// minor tidying up for AES system
// watch out for wordsize here !!!

AND read.ch() = VALOF
$(
   LET mouse.buf = VEC 3
   G.sc.mouse(mouse.buf)
   RESULTIS mouse.buf!2
$)
.

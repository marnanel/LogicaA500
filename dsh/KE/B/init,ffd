
//  AES SOURCE  4.87

/**
         INIT - MACHINE SPECIFIC INITIALISATION
         --------------------------------------

         NAME OF FILE CONTAINING RUNNABLE CODE:

         kernel - unfortunately. 

         N.B. This was throwaway code in the original system.

         REVISION HISTORY:

         DATE      VERSION  AUTHOR  DETAILS OF CHANGE
         24.9.87   1        PAC     Initial DISH version
         24.04.88  2        SA      Problems with vfs
**/

SECTION "b.Init"

GET "LIBHDR"
GET ":4.DSH.GH.glhd"
GET ":4.DSH.GH.gldyhd"
GET ":4.DSH.H.sdhd"
GET ":4.DSH.H.sdphd"
GET ":4.DSH.H.kdhd"
GET ":4.DSH.H.uthd"
GET ":4.DSH.H.iophd"
GET ":4.DSH.H.wmhd"

LET G.IN.dy.init() BE
$(    
   check.configuration()
   setup.screen()
   setup.sprite.areas()
   setup.player()
   setup.keyboard()
//   setup.font()

   //  ut.write globals - set up ONLY on startup.
   G.ut.stream      := 0 // file handle
   G.ut.sequence.no := 1 // file number

$<debug
   if g.ut.diag() do Debug(0)
$>debug

//   G.sc.keyboard.flush() // Flush keyboard buffer last
$)

//
// need to do something here to ensure that the system has
// enough screen memory configured, etc.
//
AND check.configuration() BE RETURN

/* ***********************************************************

AND check.( runprog.result ) BE UNLESS runprog.result fall.over()

AND fall.over() BE
$( G.sc.mess("Error: System wrongly Configured")
   G.ut.abort(m.ut.init.abort)
$)
************************************************************** */

//
// Initialise display, mouse and sprite space
//
//
AND setup.screen() BE
$(
   LET pb = VEC 7

   // N.B. these two lines must occur before Mode change
// ????  OSByte(144,0,0) // Set display position and interlace
   OSByte(114,1,0)   // Set non shadow modes at next mode change

   VDU("22,12") // MODE 12
   G.sc.initialise.mouse()

   // -- set up palette
   VDU("23,25,3,2,4,6,8,10,12,14")      // 3 bits per pixel anti-aliasing
   VDU("23,25,128,1,240,240,240,0,0,0") // black on white text

   // Debug(0)
   G.wm.message("Print !NewPal")
   Oscli("Print !NewPal")  // N.B. accesses ADFS for file
   Oscli("Print F.Wimp")   // N.B. accesses ADFS for file
   Oscli("Pointer")

   // earliest point for messages - screen has been initialised now
   // G.wm.Message(" Logica Turbo Domesday starting; please wait")
$)

//
// Disable the player front panel switches, etc.
//
AND setup.player() BE
$(
    g.vh.send.fcode("I0")  // Disable local controls
    g.vh.send.fcode("J0")  // Disable handset
    g.vh.send.fcode("$0")  // Disable replay switch

    // front panel and handset enabled for debugging purposes
$<floppy
    g.vh.send.fcode("I1")  // Enable local controls
    g.vh.send.fcode("J1")  // Enable handset
$>floppy
$)

//
// Set function keys to give codes, etc.
//
AND setup.keyboard() BE
$(
    OSByte(4,2)                  // Set cursor keys to give characters
    OSByte(229,1)                // set Escape key to give character
    OSByte(225,m.kd.keybase,0)   // Set function keys to give ASCII
    OSByte(226,m.kd.shiftbase,0) // Set shift+func key to give ASCII
    OSByte(227,1,0)              // Set cntrl+func key to give strings
    OSByte(228,1,0)              // Set shift+cntrl+func to give strings
    OSByte(200,2,0)              // Clear memory on BREAK (inits BASIC)
$)

//
// new stuff for A500 default font - modify the zero, pound & N/A chars
//
AND setup.font() BE 
$(
   LET ft = TABLE

   #x30, #x663C, #x6666, #x6666, #x003C, // character #x30 ( zero )
   #x60, #x361C, #x7C30, #x3030, #x007E, // character #x60 ( pound )   
   #x86, #x7000, #x5750, #x5755, #x0505  // character #x86 ( N/A )

   FOR i = 0 TO 10 BY 5 DO
   VDU( "23,%,%;%;%;%;", ft!i, ft!(i+1), ft!(i+2), ft!(i+3), ft!(i+4) )
$)

AND setup.sprite.areas() BE
$(
   LET pb = VEC 7

   // initialise window manager user sprite area
   //
   // N.B. the values used below are obtained by trial and error
   // using a BASIC program. The Acorn documentation is insufficient.
   // The really dodgy value is the 100, which is the offset to first
   // sprite. See the reference manual for details of control block
   //

   G.wm.sprite.area!0 := m.wm.sprite.size * bytesperword // set up header info
   G.wm.sprite.area!1 := 1                    // so that the SNEW
   G.wm.sprite.area!2 := 100                  // command will initialise
   G.wm.sprite.area   := G.wm.sprite.area * bytesperword // m/c address

   pb!0 := G.wm.sprite.area        // R1 = sprite workspace 

   UNLESS OsSprite( m.sd.clear.sprite.area, pb ) // initialise sprite area
   DO G.wm.error("Wimp Sprite init failed")

   // now the screen handler sprites
   //
   G.sc.sprite.area!0 := m.sd.sprite.ws.size  // set up header info
   G.sc.sprite.area!1 := 1                    // so that the SNEW
   G.sc.sprite.area!2 := 100                  // command will initialise
   G.sc.sprite.area   := G.sc.sprite.area * bytesperword // m/c address

   pb!0 := G.sc.sprite.area        // R1 = sprite workspace 

   UNLESS OsSprite( m.sd.clear.sprite.area, pb ) // initialise sprite area
   DO G.wm.error("SC Sprite init failed") 
$)

.

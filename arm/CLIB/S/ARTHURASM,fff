; >s.ArthurAsm 

; SWI values for ProtoArfur 0.012

WriteC        * &00
WriteS        * &01
Write0        * &02
NewLine       * &03
ReadC         * &04
CLI           * &05
Byte          * &06
Word          * &07
File          * &08
Args          * &09
BGet          * &0A

BPut          * &0B
Multiple      * &0C
Open          * &0D
ReadLine      * &0E
Control       * &0F
GetEnv        * &10
Exit          * &11
SetEnv        * &12
IntOn         * &13
IntOff        * &14
CallBack      * &15
EnterOS       * &16
BreakPt       * &17
BreakCtrl     * &18
UnusedSWI     * &19
UpdateMEMC    * &1A
SetCallBack   * &1B
Mouse         * &1C

Heap          * &1D     ; Our new ones start here
Module        * &1E
Claim         * &1F     ; PMF's vector handling
Release       * &20     ; routines
ReadUnsigned  * &21     ; Read an unsigned number
GenerateEvent * &22
ReadVarVal    * &23     ; read variable value & type
SetVarVal     * &24     ; set  variable value & type
GSInit        * &25
GSRead        * &26
GSTrans       * &27
BinaryToDecimal * &28
FSControl     * &29
ChangeDynamicArea * &2A
GenerateError * &2B
ReadEscapeState * &2C

WriteI        * &100

UserSWI       * &200

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Register names

r0 RN 0
r1 RN 1
r2 RN 2
r3 RN 3
r4 RN 4
r5 RN 5
r6 RN 6
r7 RN 7
r8 RN 8
r9 RN 9
r10 RN 10
r11 RN 11
r12 RN 12
r13 RN 13
r14 RN 14
r15 RN 15

R0 RN 0
R1 RN 1
R2 RN 2
R3 RN 3
R4 RN 4
R5 RN 5
R6 RN 6
R7 RN 7
R8 RN 8
R9 RN 9
R10 RN 10
R11 RN 11
R12 RN 12
R13 RN 13
R14 RN 14
R15 RN 15
PC RN 15

a1 RN 0
a2 RN 1
a3 RN 2
a4 RN 3
v1 RN 4
v2 RN 5
v3 RN 6
v4 RN 7
v5 RN 8
v6 RN 9
fp RN 10
ip RN 11
sp RN 12
sl RN 13
lk RN 14
pc RN 15


; osgbpb(a,block) - think about these 

; in s.ArthurAsm ...
;  get()
;  vdu()
;  vduw()
;  mouse()
;  osbyte()
;  osword()
;  osfile()

        IMPORT |x$stack_overflow|

        EXPORT |get|
        EXPORT |vdu|
        EXPORT |vduw|
        EXPORT |mouseX|
        EXPORT |mouseY|
        EXPORT |mouseB|
        EXPORT |osbyte|
        EXPORT |osword|
        EXPORT |osfile|


 AREA |C$$code|, CODE, READONLY

|v$codesegment|

get     SWI     ReadC
        MOV     PC,R14

vduw    SWI     WriteC
        MOV     R0,R0,LSR #8
vdu     SWI     WriteC
        MOV     PC,R14

osbyte  SWI     Byte
        AND     R0,R1,#&FF
        ORR     R0,R0,R2,LSL #8
        MOV     PC,R14

osword  SWI     Word
        MOV     PC,R14

mouseX  SWI     Mouse
        MOV     PC,R14

mouseY  SWI     Mouse
        MOV     R0,R1
        MOV     PC,r14

mouseB  SWI Mouse
        MOV     R0,R2
        MOV     PC,R14

; In : r0 contains function, r1 points to (extended) block 

osfile  MOV     ip, sp
        STMFD   sp!, {v1,v2,fp,ip,lk,pc}
        CMPS    sp, sl
        BLCC    |x$stack_overflow|
        MOV     ip,a2
        LDMIA   a2,{a2,a3,a4,v1,v2}
        SWI     File
        STMIA   ip,{a2,a3,a4,v1,v2}
        LDMEA   fp, {v1,v2,fp,sp,pc}^

        END
